
import os
import logging
import openai
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üõ† –°–æ–≤–µ—Ç—ã –ø–æ –ü–ö")).add(KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø NeoHelp ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å —Ä–µ–º–æ–Ω—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ü–ö. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)

@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message):
    await message.answer("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å
/help ‚Äî –ø–æ–º–æ—â—å
/about ‚Äî –æ –±–æ—Ç–µ")

@dp.message_handler(commands=["about"])
async def about_handler(message: types.Message):
    await message.answer("üß† –Ø –∏—Å–ø–æ–ª—å–∑—É—é ChatGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤.
–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ NeoHelp.")

@dp.message_handler(lambda message: message.text == "üõ† –°–æ–≤–µ—Ç—ã –ø–æ –ü–ö")
async def pc_tips(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ—á–µ–º—É –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä?¬ª –∏–ª–∏ ¬´–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Windows?¬ª")

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_button(message: types.Message):
    await about_handler(message)

@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        user_input = message.text.strip()
        if not user_input:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")
            return

        logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}: {user_input}")

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_input}]
        )

        answer = response.choices[0].message.content
        await message.reply(answer)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
